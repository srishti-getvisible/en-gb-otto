/* Nice Select jQuery Plugin */
(function($) {
    'use strict';
    
    var pluginName = 'niceSelect';
    
    function Plugin(element, options) {
        this.element = element;
        this.$element = $(element);
        this.options = $.extend({}, $.fn[pluginName].defaults, options);
        this.init();
    }
    
    Plugin.prototype = {
        init: function() {
            this.createMarkup();
            this.bindEvents();
            this.updateDisplay();
        },
        
        createMarkup: function() {
            var $select = this.$element;
            var $container = $('<div class="nice-select"></div>');
            var $current = $('<span class="current"></span>');
            var $list = $('<ul class="list"></ul>');
            
            $container.append($current);
            $container.append($list);
            
            $select.wrap($container);
            $select.before($container);
            
            this.$container = $container;
            this.$current = $current;
            this.$list = $list;
            
            // Create options
            this.createOptions();
        },
        
        createOptions: function() {
            var self = this;
            var $select = this.$element;
            
            $select.find('option').each(function() {
                var $option = $(this);
                var $listItem = $('<li class="option" data-value="' + $option.val() + '">' + $option.text() + '</li>');
                
                if ($option.is(':selected')) {
                    $listItem.addClass('selected');
                }
                
                if ($option.is(':disabled')) {
                    $listItem.addClass('disabled');
                }
                
                self.$list.append($listItem);
            });
        },
        
        bindEvents: function() {
            var self = this;
            
            this.$container.on('click', function(e) {
                e.preventDefault();
                self.toggleDropdown();
            });
            
            this.$list.on('click', 'li.option:not(.disabled)', function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                var $option = $(this);
                var value = $option.data('value');
                
                self.selectOption(value);
                self.closeDropdown();
            });
            
            $(document).on('click', function(e) {
                if (!$(e.target).closest('.nice-select').length) {
                    self.closeDropdown();
                }
            });
        },
        
        selectOption: function(value) {
            var $option = this.$list.find('li.option[data-value="' + value + '"]');
            
            // Update select element
            this.$element.val(value).trigger('change');
            
            // Update display
            this.$current.text($option.text());
            
            // Update selected state
            this.$list.find('li.option').removeClass('selected');
            $option.addClass('selected');
        },
        
        updateDisplay: function() {
            var $selectedOption = this.$element.find('option:selected');
            if ($selectedOption.length) {
                this.$current.text($selectedOption.text());
            }
        },
        
        toggleDropdown: function() {
            if (this.$container.hasClass('open')) {
                this.closeDropdown();
            } else {
                this.openDropdown();
            }
        },
        
        openDropdown: function() {
            this.$container.addClass('open');
        },
        
        closeDropdown: function() {
            this.$container.removeClass('open');
        },
        
        destroy: function() {
            this.$element.unwrap();
            this.$element.show();
        }
    };
    
    $.fn[pluginName] = function(options) {
        return this.each(function() {
            if (!$.data(this, 'plugin_' + pluginName)) {
                $.data(this, 'plugin_' + pluginName, new Plugin(this, options));
            }
        });
    };
    
    $.fn[pluginName].defaults = {};
    
    $.fn[pluginName].Constructor = Plugin;
    
})(jQuery); 