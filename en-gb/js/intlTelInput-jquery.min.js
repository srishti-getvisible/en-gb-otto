/* International Telephone Input jQuery Plugin */
(function($) {
    'use strict';
    
    var pluginName = 'intlTelInput';
    
    function Plugin(element, options) {
        this.element = element;
        this.$element = $(element);
        this.options = $.extend({}, $.fn[pluginName].defaults, options);
        this.init();
    }
    
    Plugin.prototype = {
        init: function() {
            this.createMarkup();
            this.bindEvents();
            this.setInitialCountry();
        },
        
        createMarkup: function() {
            var $input = this.$element;
            var $container = $('<div class="iti"></div>');
            var $flagContainer = $('<div class="iti__flag-container"></div>');
            var $selectedFlag = $('<div class="iti__selected-flag"></div>');
            var $arrow = $('<div class="iti__arrow"></div>');
            
            $selectedFlag.append($arrow);
            $flagContainer.append($selectedFlag);
            $container.append($flagContainer);
            
            $input.wrap($container);
            $input.before($flagContainer);
            
            this.$container = $container;
            this.$flagContainer = $flagContainer;
            this.$selectedFlag = $selectedFlag;
            this.$arrow = $arrow;
        },
        
        bindEvents: function() {
            var self = this;
            
            this.$selectedFlag.on('click', function() {
                self.toggleDropdown();
            });
            
            $(document).on('click', function(e) {
                if (!$(e.target).closest('.iti').length) {
                    self.closeDropdown();
                }
            });
        },
        
        setInitialCountry: function() {
            var country = this.options.initialCountry || 'us';
            this.setCountry(country);
        },
        
        setCountry: function(countryCode) {
            this.selectedCountry = countryCode;
            this.$selectedFlag.attr('data-country', countryCode);
            
            // Update dial code if separateDialCode is enabled
            if (this.options.separateDialCode) {
                var dialCode = this.getDialCode(countryCode);
                if (dialCode) {
                    this.$element.val('+' + dialCode + ' ');
                }
            }
        },
        
        getDialCode: function(countryCode) {
            // Simplified country codes - in a real implementation, this would be a comprehensive list
            var dialCodes = {
                'us': '1',
                'ca': '1',
                'mx': '52',
                'es': '34',
                'uk': '44',
                'de': '49',
                'fr': '33'
            };
            return dialCodes[countryCode] || '';
        },
        
        toggleDropdown: function() {
            if (this.$container.hasClass('open')) {
                this.closeDropdown();
            } else {
                this.openDropdown();
            }
        },
        
        openDropdown: function() {
            this.$container.addClass('open');
            this.$arrow.addClass('iti__arrow--up');
        },
        
        closeDropdown: function() {
            this.$container.removeClass('open');
            this.$arrow.removeClass('iti__arrow--up');
        },
        
        getNumber: function() {
            return this.$element.val();
        },
        
        setNumber: function(number) {
            this.$element.val(number);
        }
    };
    
    $.fn[pluginName] = function(options) {
        return this.each(function() {
            if (!$.data(this, 'plugin_' + pluginName)) {
                $.data(this, 'plugin_' + pluginName, new Plugin(this, options));
            }
        });
    };
    
    $.fn[pluginName].defaults = {
        initialCountry: 'us',
        separateDialCode: true,
        preferredCountries: ['us', 'ca', 'mx']
    };
    
    $.fn[pluginName].Constructor = Plugin;
    
})(jQuery); 